"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9485],{3905:(e,t,i)=>{i.d(t,{Zo:()=>c,kt:()=>d});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function u(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var m=n.createContext({}),o=function(e){var t=n.useContext(m),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},c=function(e){var t=o(e.components);return n.createElement(m.Provider,{value:t},e.children)},s="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,m=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),s=o(i),p=r,d=s["".concat(m,".").concat(p)]||s[p]||f[p]||a;return i?n.createElement(d,l(l({ref:t},c),{},{components:i})):n.createElement(d,l({ref:t},c))}));function d(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,l=new Array(a);l[0]=p;var u={};for(var m in t)hasOwnProperty.call(t,m)&&(u[m]=t[m]);u.originalType=e,u[s]="string"==typeof e?e:r,l[1]=u;for(var o=2;o<a;o++)l[o]=i[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,i)}p.displayName="MDXCreateElement"},9385:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>u,toc:()=>o});var n=i(7462),r=(i(7294),i(3905));const a={title:"client-go \u6e90\u7801\u5206\u6790\uff089\uff09 - workerqueue\u4e4b\u9650\u901f\u961f\u5217RateLimitingQueue",readmore:!0,date:new Date("2022-12-15T12:10:13.000Z"),categories:"\u4e91\u539f\u751f",tags:["client-go"]},l=void 0,u={unversionedId:"cloud-native/client-go/client-go-09",id:"cloud-native/client-go/client-go-09",title:"client-go \u6e90\u7801\u5206\u6790\uff089\uff09 - workerqueue\u4e4b\u9650\u901f\u961f\u5217RateLimitingQueue",description:"workerqueue\u7684\u9650\u901f\u961f\u5217RateLimitingQueue\u641e\u660e\u767d\u4e09\u4ef6\u4e8b\u5c31\u53ef\u4ee5\u4e86\u3002",source:"@site/docs/cloud-native/client-go/client-go-09.md",sourceDirName:"cloud-native/client-go",slug:"/cloud-native/client-go/client-go-09",permalink:"/docs/cloud-native/client-go/client-go-09",draft:!1,editUrl:"https://github.com/backendcloud/docusaurus/tree/main/docs/cloud-native/client-go/client-go-09.md",tags:[{label:"client-go",permalink:"/docs/tags/client-go"}],version:"current",frontMatter:{title:"client-go \u6e90\u7801\u5206\u6790\uff089\uff09 - workerqueue\u4e4b\u9650\u901f\u961f\u5217RateLimitingQueue",readmore:!0,date:"2022-12-15T12:10:13.000Z",categories:"\u4e91\u539f\u751f",tags:["client-go"]},sidebar:"tutorialSidebar",previous:{title:"client-go \u6e90\u7801\u5206\u6790\uff088\uff09 - workerqueue\u4e4b\u5ef6\u65f6\u961f\u5217DelayingQueue",permalink:"/docs/cloud-native/client-go/client-go-08"},next:{title:"client-go \u6e90\u7801\u5206\u6790\uff0810\uff09 - \u4f7f\u7528client-go\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355controller\u7684\u4f8b\u5b50",permalink:"/docs/cloud-native/client-go/client-go-10"}},m={},o=[{value:"BucketRateLimiter",id:"bucketratelimiter",level:2},{value:"ItemExponentialFailureRateLimiter",id:"itemexponentialfailureratelimiter",level:2},{value:"ItemFastSlowRateLimiter",id:"itemfastslowratelimiter",level:2},{value:"MaxOfRateLimiter",id:"maxofratelimiter",level:2},{value:"WithMaxWaitRateLimiter",id:"withmaxwaitratelimiter",level:2}],c={toc:o},s="wrapper";function f(e){let{components:t,...a}=e;return(0,r.kt)(s,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"workerqueue\u7684\u9650\u901f\u961f\u5217RateLimitingQueue\u641e\u660e\u767d\u4e09\u4ef6\u4e8b\u5c31\u53ef\u4ee5\u4e86\u3002"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u4ee3\u7801\u7ed3\u6784"),(0,r.kt)("li",{parentName:"ol"},"5\u79cdRateLimitingQueue(\u9650\u901f\u961f\u5217)"),(0,r.kt)("li",{parentName:"ol"},"Kubernetes\u4e3b\u8981\u7528\u4e86\u4e0a\u8ff05\u79cd\u9650\u901f\u961f\u5217\u7684\u54ea\u51e0\u79cd")),(0,r.kt)("h1",{id:"\u4ee3\u7801\u7ed3\u6784"},"\u4ee3\u7801\u7ed3\u6784"),(0,r.kt)("p",null,"\u56e0\u4e3a\u666e\u901a\u961f\u5217Queue\uff0c\u5ef6\u65f6\u961f\u5217DelayingQueue\uff0c\u9650\u901f\u961f\u5217RateLimitingQueue\uff0c\u540e\u4e00\u4e2a\u961f\u5217\u4ee5\u524d\u4e00\u4e2a\u961f\u5217\u7684\u5b9e\u73b0\u4e3a\u57fa\u7840\uff0c\u5c42\u5c42\u6dfb\u52a0\u65b0\u529f\u80fd\uff0c\u6240\u4ee5rateLimitingType\u7ed3\u6784\u4f53\u5305\u88c5\u4e86\u5ef6\u8fdf\u961f\u5217\u7684\u63a5\u53e3\u548cRateLimiter\u63a5\u53e3\u3002\u800c5\u79cd\u9650\u901f\u9650\u901f\u961f\u5217\u90fd\u5b9e\u73b0\u4e86RateLimiter\u63a5\u53e3\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type rateLimitingType struct {\n    DelayingInterface\n    rateLimiter RateLimiter\n}\n")),(0,r.kt)("p",null,"rateLimitingType\u7ed3\u6784\u4f53\u5b9e\u73b0\u4e86RateLimitingInterface\u63a5\u53e3\u7684\u6240\u6709\u65b9\u6cd5\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// RateLimitingInterface is an interface that rate limits items being added to the queue.\ntype RateLimitingInterface interface {\n    DelayingInterface\n\n    // AddRateLimited adds an item to the workqueue after the rate limiter says it's ok\n    AddRateLimited(item interface{})\n\n    // Forget indicates that an item is finished being retried.  Doesn't matter whether it's for perm failing\n    // or for success, we'll stop the rate limiter from tracking it.  This only clears the `rateLimiter`, you\n    // still have to call `Done` on the queue.\n    Forget(item interface{})\n\n    // NumRequeues returns back how many times the item was requeued\n    NumRequeues(item interface{}) int\n}\n\n// AddRateLimited AddAfter's the item based on the time when the rate limiter says it's ok\nfunc (q *rateLimitingType) AddRateLimited(item interface{}) {\n    q.DelayingInterface.AddAfter(item, q.rateLimiter.When(item))\n}\n\nfunc (q *rateLimitingType) NumRequeues(item interface{}) int {\n    return q.rateLimiter.NumRequeues(item)\n}\n\nfunc (q *rateLimitingType) Forget(item interface{}) {\n    q.rateLimiter.Forget(item)\n}\n")),(0,r.kt)("p",null,"\u5176\u4e2d AddRateLimited\u65b9\u6cd5 \u5c06\u9650\u901f\u961f\u5217\u7684item\u901a\u8fc7When\u65b9\u6cd5\u83b7\u53d6\u5230\u671f\u65f6\u95f4\uff0c\u7136\u540e\u901a\u8fc7\u5ef6\u8fdf\u961f\u5217\u7684AddAfter\u65b9\u6cd5\u5c06\u8be5item\u52a0\u5165\u961f\u5217\u3002"),(0,r.kt)("h1",{id:"5\u79cd\u9650\u901f\u9650\u901f\u961f\u5217"},"5\u79cd\u9650\u901f\u9650\u901f\u961f\u5217"),(0,r.kt)("p",null,"5\u79cd\u9650\u901f\u9650\u901f\u961f\u5217\u90fd\u5b9e\u73b0\u4e86\u4e0b\u9762\u7684RateLimiter\u63a5\u53e3\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type RateLimiter interface {\n    // When gets an item and gets to decide how long that item should wait\n    When(item interface{}) time.Duration\n    // Forget indicates that an item is finished being retried.  Doesn't matter whether it's for failing\n    // or for success, we'll stop tracking it\n    Forget(item interface{})\n    // NumRequeues returns back how many failures the item has had\n    NumRequeues(item interface{}) int\n}\n")),(0,r.kt)("h2",{id:"bucketratelimiter"},"BucketRateLimiter"),(0,r.kt)("p",null,"\u4ee4\u724c\u6876\u9650\u901f\u5668BucketRateLimiter \u7528\u4e86 golang \u6807\u51c6\u5e93\u7684\u4ee4\u724c\u6876\u9650\u6d41\u5668 golang.org/x/time/rate.Limiter \u5b9e\u73b0\u3002\u6240\u6709\u5143\u7d20\u90fd\u662f\u4e00\u6837\u7684\uff0c\u6765\u51e0\u6b21\u90fd\u662f\u4e00\u6837\uff0c\u6240\u4ee5NumRequeues\uff0cForget\u90fd\u6ca1\u6709\u610f\u4e49\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type BucketRateLimiter struct {\n    *rate.Limiter\n}\n\nfunc (r *BucketRateLimiter) When(item interface{}) time.Duration {\n    return r.Limiter.Reserve().Delay()\n}\n\nfunc (r *BucketRateLimiter) NumRequeues(item interface{}) int {\n    return 0\n}\n\nfunc (r *BucketRateLimiter) Forget(item interface{}) {\n}\n")),(0,r.kt)("h2",{id:"itemexponentialfailureratelimiter"},"ItemExponentialFailureRateLimiter"),(0,r.kt)("p",null,"\u6307\u6570\u5931\u8d25\u9650\u901f\u5668ItemExponentialFailureRateLimiter\uff0c\u5931\u8d25\u6b21\u6570\u8d8a\u591a\uff0c\u9650\u901f\u8d8a\u957f\u800c\u4e14\u662f\u6307\u6570\u7ea7\u589e\u957f\u7684\u4e00\u79cd\u9650\u901f\u5668\u3002\u5f53\u7136\u4e5f\u4e0d\u662f\u65e0\u9650\u589e\u957f\u4e0b\u53bb\uff0c\u6709\u6700\u5927\u9650\u901f\u65f6\u95f4\u914d\u7f6e\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type ItemExponentialFailureRateLimiter struct {\n    failuresLock sync.Mutex\n    failures     map[interface{}]int\n\n    baseDelay time.Duration\n    maxDelay  time.Duration\n}\n\nfunc (r *ItemExponentialFailureRateLimiter) When(item interface{}) time.Duration {\n    r.failuresLock.Lock()\n    defer r.failuresLock.Unlock()\n\n    exp := r.failures[item]\n    r.failures[item] = r.failures[item] + 1\n\n    // The backoff is capped such that 'calculated' value never overflows.\n    backoff := float64(r.baseDelay.Nanoseconds()) * math.Pow(2, float64(exp))\n    if backoff > math.MaxInt64 {\n        return r.maxDelay\n    }\n\n    calculated := time.Duration(backoff)\n    if calculated > r.maxDelay {\n        return r.maxDelay\n    }\n\n    return calculated\n}\n\nfunc (r *ItemExponentialFailureRateLimiter) NumRequeues(item interface{}) int {\n    r.failuresLock.Lock()\n    defer r.failuresLock.Unlock()\n\n    return r.failures[item]\n}\n\nfunc (r *ItemExponentialFailureRateLimiter) Forget(item interface{}) {\n    r.failuresLock.Lock()\n    defer r.failuresLock.Unlock()\n\n    delete(r.failures, item)\n}\n")),(0,r.kt)("h2",{id:"itemfastslowratelimiter"},"ItemFastSlowRateLimiter"),(0,r.kt)("p",null,"ItemFastSlowRateLimiter \u5bf9\u4e00\u5b9a\u6b21\u6570\u7684\u5c1d\u8bd5\u8fdb\u884c\u5feb\u901f\u91cd\u8bd5\uff0c\u7136\u540e\u8fdb\u884c\u6162\u901f\u91cd\u8bd5\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type ItemFastSlowRateLimiter struct {\n    failuresLock sync.Mutex\n    failures     map[interface{}]int\n\n    maxFastAttempts int\n    fastDelay       time.Duration\n    slowDelay       time.Duration\n}\n\nfunc (r *ItemFastSlowRateLimiter) When(item interface{}) time.Duration {\n    r.failuresLock.Lock()\n    defer r.failuresLock.Unlock()\n\n    r.failures[item] = r.failures[item] + 1\n\n    if r.failures[item] <= r.maxFastAttempts {\n        return r.fastDelay\n    }\n\n    return r.slowDelay\n}\n\nfunc (r *ItemFastSlowRateLimiter) NumRequeues(item interface{}) int {\n    r.failuresLock.Lock()\n    defer r.failuresLock.Unlock()\n\n    return r.failures[item]\n}\n\nfunc (r *ItemFastSlowRateLimiter) Forget(item interface{}) {\n    r.failuresLock.Lock()\n    defer r.failuresLock.Unlock()\n\n    delete(r.failures, item)\n}\n")),(0,r.kt)("h2",{id:"maxofratelimiter"},"MaxOfRateLimiter"),(0,r.kt)("p",null,"MaxOfRateLimiter \u8c03\u7528\u6bcf\u4e2a RateLimiter \u5e76\u8fd4\u56de\u6700\u574f\u60c5\u51b5\u54cd\u5e94\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type MaxOfRateLimiter struct {\n    limiters []RateLimiter\n}\n\nfunc (r *MaxOfRateLimiter) When(item interface{}) time.Duration {\n    ret := time.Duration(0)\n    for _, limiter := range r.limiters {\n        curr := limiter.When(item)\n        if curr > ret {\n            ret = curr\n        }\n    }\n\n    return ret\n}\n\nfunc (r *MaxOfRateLimiter) NumRequeues(item interface{}) int {\n    ret := 0\n    for _, limiter := range r.limiters {\n        curr := limiter.NumRequeues(item)\n        if curr > ret {\n            ret = curr\n        }\n    }\n\n    return ret\n}\n\nfunc (r *MaxOfRateLimiter) Forget(item interface{}) {\n    for _, limiter := range r.limiters {\n        limiter.Forget(item)\n    }\n}\n")),(0,r.kt)("h2",{id:"withmaxwaitratelimiter"},"WithMaxWaitRateLimiter"),(0,r.kt)("p",null,"\u4f7f\u7528MaxWaitRateLimiter\u5177\u6709maxDelay\uff0c\u53ef\u907f\u514d\u7b49\u5f85\u592a\u957f\u65f6\u95f4\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type WithMaxWaitRateLimiter struct {\n    limiter  RateLimiter\n    maxDelay time.Duration\n}\n\nfunc (w WithMaxWaitRateLimiter) When(item interface{}) time.Duration {\n    delay := w.limiter.When(item)\n    if delay > w.maxDelay {\n        return w.maxDelay\n    }\n\n    return delay\n}\n\nfunc (w WithMaxWaitRateLimiter) Forget(item interface{}) {\n    w.limiter.Forget(item)\n}\n\nfunc (w WithMaxWaitRateLimiter) NumRequeues(item interface{}) int {\n    return w.limiter.NumRequeues(item)\n}\n")),(0,r.kt)("h1",{id:"kubernetes\u4e3b\u8981\u7528\u4e86\u4e0a\u8ff05\u79cd\u9650\u901f\u961f\u5217\u7684\u54ea\u51e0\u79cd"},"Kubernetes\u4e3b\u8981\u7528\u4e86\u4e0a\u8ff05\u79cd\u9650\u901f\u961f\u5217\u7684\u54ea\u51e0\u79cd"),(0,r.kt)("p",null,(0,r.kt)("img",{src:i(4712).Z,width:"1685",height:"932"})),(0,r.kt)("p",null,"\u53ef\u4ee5\u770b\u51fa\u57fa\u672c\u5c31\u7528\u4e86\u4e24\u79cd\u9650\u901f\u961f\u5217BucketRateLimiter\u548cItemExponentialFailureRateLimiter\uff0c\u4e14\u4ee5BucketRateLimiter\u4e3a\u4e3b\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// DefaultControllerRateLimiter is a no-arg constructor for a default rate limiter for a workqueue.  It has\n// both overall and per-item rate limiting.  The overall is a token bucket and the per-item is exponential\nfunc DefaultControllerRateLimiter() RateLimiter {\n    return NewMaxOfRateLimiter(\n        NewItemExponentialFailureRateLimiter(5*time.Millisecond, 1000*time.Second),\n        // 10 qps, 100 bucket size.  This is only for retry speed and its only the overall factor (not per item)\n        &BucketRateLimiter{Limiter: rate.NewLimiter(rate.Limit(10), 100)},\n    )\n}\n")))}f.isMDXComponent=!0},4712:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/2022-12-15-01-47-18-9f96886372261808d8c52b295c8e20df.png"}}]);