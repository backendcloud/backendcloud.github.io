"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[532],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(t),p=o,m=u["".concat(s,".").concat(p)]||u[p]||f[p]||i;return t?r.createElement(m,a(a({ref:n},d),{},{components:t})):r.createElement(m,a({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7923:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const i={title:"client-go \u6e90\u7801\u5206\u6790\uff086\uff09 - DeltaFIFO",readmore:!0,date:new Date("2022-12-06T15:23:04.000Z"),categories:"\u4e91\u539f\u751f",tags:["client-go"]},a=void 0,l={unversionedId:"cloud-native/client-go/client-go-06",id:"cloud-native/client-go/client-go-06",title:"client-go \u6e90\u7801\u5206\u6790\uff086\uff09 - DeltaFIFO",description:"DeltaFIFO\u4e5f\u5305\u542b\u5728 Informer \u4e2d\u3002DeltaFIFO \u662f Delta + FIFO\uff08\u5148\u8fdb\u5148\u51fa\u961f\u5217\uff09\uff0cDelta\u7684\u6570\u636e\u683c\u5f0f\u5982\u4e0b\u3002DeltaType\u662fString\u7684\u7c7b\u578b\uff0c\u53ea\u6709\u56db\u79cd\uff0c\u5206\u522b\u662f\u589e\u52a0\uff0c\u66f4\u65b0\uff0c\u5220\u9664\uff0c\u540c\u6b65\u3002\u4f5c\u4e3aFIFO\uff0c\u6709push\u548cpop\u65b9\u6cd5\u3002",source:"@site/docs/cloud-native/client-go/client-go-06.md",sourceDirName:"cloud-native/client-go",slug:"/cloud-native/client-go/client-go-06",permalink:"/docs/cloud-native/client-go/client-go-06",draft:!1,editUrl:"https://github.com/backendcloud/backendcloud.github.io/tree/main/docs/cloud-native/client-go/client-go-06.md",tags:[{label:"client-go",permalink:"/docs/tags/client-go"}],version:"current",frontMatter:{title:"client-go \u6e90\u7801\u5206\u6790\uff086\uff09 - DeltaFIFO",readmore:!0,date:"2022-12-06T15:23:04.000Z",categories:"\u4e91\u539f\u751f",tags:["client-go"]},sidebar:"tutorialSidebar",previous:{title:"client-go \u6e90\u7801\u5206\u6790\uff085\uff09 - informer\u673a\u5236\u4e2d\u7684\u672c\u5730\u5b58\u50a8indexer",permalink:"/docs/cloud-native/client-go/client-go-05"},next:{title:"client-go \u6e90\u7801\u5206\u6790\uff087\uff09 - workerqueue\u4e4b\u666e\u901a\u961f\u5217Queue",permalink:"/docs/cloud-native/client-go/client-go-07"}},s={},c=[],d={toc:c},u="wrapper";function f(e){let{components:n,...i}=e;return(0,o.kt)(u,(0,r.Z)({},d,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"DeltaFIFO\u4e5f\u5305\u542b\u5728 Informer \u4e2d\u3002DeltaFIFO \u662f Delta + FIFO\uff08\u5148\u8fdb\u5148\u51fa\u961f\u5217\uff09\uff0cDelta\u7684\u6570\u636e\u683c\u5f0f\u5982\u4e0b\u3002DeltaType\u662fString\u7684\u7c7b\u578b\uff0c\u53ea\u6709\u56db\u79cd\uff0c\u5206\u522b\u662f\u589e\u52a0\uff0c\u66f4\u65b0\uff0c\u5220\u9664\uff0c\u540c\u6b65\u3002\u4f5c\u4e3aFIFO\uff0c\u6709push\u548cpop\u65b9\u6cd5\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type Delta struct {\n    Type   DeltaType\n    Object interface{}\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    Added   DeltaType = "Added"  // \u589e\u52a0\n    Updated DeltaType = "Updated"  // \u66f4\u65b0\n    Deleted DeltaType = "Deleted"  // \u5220\u9664\n    Sync DeltaType = "Sync"  // \u540c\u6b65\n)\n')),(0,o.kt)("p",null,"DeltaFIFO \u662f\u4e00\u4e2a\u53ef\u7528\u4e8e\u5904\u7406Kubernetes\u8d44\u6e90\u5bf9\u8c61\u66f4\u6539\u7684\u961f\u5217\u3002 \u4ece\u4e0b\u56fe\u770b\u51fa\uff0cDeltaFIFO \u662f\u4e00\u4e2a\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u7684\u961f\u5217\uff0c\u751f\u4ea7\u8005\u662f Reflector\uff0c\u6d88\u8d39\u8005\u662f Pop \u51fd\u6570\u3002\u6d88\u8d39\u7684\u6570\u636e\u4e00\u65b9\u9762\u5b58\u50a8\u5230 Indexer \u4e2d\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u4ee5\u901a\u8fc7 Informer \u7684 handler \u8fdb\u884c\u5904\u7406\uff0cInformer \u7684 handler \u5904\u7406\u7684\u6570\u636e\u9700\u8981\u4e0e\u5b58\u50a8\u5728 Indexer \u4e2d\u7684\u6570\u636e\u5339\u914d\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cPop \u7684\u5355\u4f4d\u662f\u4e00\u4e2a Deltas\uff0c\u800c\u4e0d\u662f Delta\u3002"),(0,o.kt)("p",null,"DetlaFIFO \u540c\u65f6\u5b9e\u73b0\u4e86 Queue \u548c Store \u63a5\u53e3\uff0c\u4f7f\u7528 Deltas \u4fdd\u5b58\u4e86\u5bf9\u8c61\u72b6\u6001\u7684\u53d8\u66f4\uff08Add/Delete/Update\uff09\u4fe1\u606f\uff0cDeltas \u7f13\u5b58\u4e86\u9488\u5bf9\u76f8\u540c\u5bf9\u8c61\u7684\u591a\u4e2a\u72b6\u6001\u53d8\u66f4\u4fe1\u606f\uff0c\u5982 Pod \u7684 Deltas","[0]","\u53ef\u80fd\u66f4\u65b0\u4e86\u6807\u7b7e\uff0cDeltas","[1]","\u53ef\u80fd\u5220\u9664\u4e86\u8be5 Pod\u3002\u6700\u8001\u7684\u72b6\u6001\u53d8\u66f4\u4fe1\u606f\u4e3a Oldest()\uff0c\u6700\u65b0\u7684\u72b6\u6001\u53d8\u66f4\u4fe1\u606f\u4e3a Newest()\uff0c\u4f7f\u7528\u4e2d\uff0c\u83b7\u53d6 DeltaFIFO \u4e2d\u5bf9\u8c61\u7684 key \u4ee5\u53ca\u83b7\u53d6 DeltaFIFO \u90fd\u4ee5\u6700\u65b0\u72b6\u6001\u4e3a\u51c6\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{src:t(2340).Z,width:"814",height:"613"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type Queue interface {\n    Store\n\n    // Pop blocks until there is at least one key to process or the\n    // Queue is closed.  In the latter case Pop returns with an error.\n    // In the former case Pop atomically picks one key to process,\n    // removes that (key, accumulator) association from the Store, and\n    // processes the accumulator.  Pop returns the accumulator that\n    // was processed and the result of processing.  The PopProcessFunc\n    // may return an ErrRequeue{inner} and in this case Pop will (a)\n    // return that (key, accumulator) association to the Queue as part\n    // of the atomic processing and (b) return the inner error from\n    // Pop.\n    Pop(PopProcessFunc) (interface{}, error)\n\n    // AddIfNotPresent puts the given accumulator into the Queue (in\n    // association with the accumulator's key) if and only if that key\n    // is not already associated with a non-empty accumulator.\n    AddIfNotPresent(interface{}) error\n\n    // HasSynced returns true if the first batch of keys have all been\n    // popped.  The first batch of keys are those of the first Replace\n    // operation if that happened before any Add, AddIfNotPresent,\n    // Update, or Delete; otherwise the first batch is empty.\n    HasSynced() bool\n\n    // Close the queue\n    Close()\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type Store interface {\n\n    // Add adds the given object to the accumulator associated with the given object's key\n    Add(obj interface{}) error\n\n    // Update updates the given object in the accumulator associated with the given object's key\n    Update(obj interface{}) error\n\n    // Delete deletes the given object from the accumulator associated with the given object's key\n    Delete(obj interface{}) error\n\n    // List returns a list of all the currently non-empty accumulators\n    List() []interface{}\n\n    // ListKeys returns a list of all the keys currently associated with non-empty accumulators\n    ListKeys() []string\n\n    // Get returns the accumulator associated with the given object's key\n    Get(obj interface{}) (item interface{}, exists bool, err error)\n\n    // GetByKey returns the accumulator associated with the given key\n    GetByKey(key string) (item interface{}, exists bool, err error)\n\n    // Replace will delete the contents of the store, using instead the\n    // given list. Store takes ownership of the list, you should not reference\n    // it after calling this function.\n    Replace([]interface{}, string) error\n\n    // Resync is meaningless in the terms appearing here but has\n    // meaning in some implementations that have non-trivial\n    // additional behavior (e.g., DeltaFIFO).\n    Resync() error\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'// \u83b7\u53d6Deltas newest delta\u7684key\u503c\uff0c\u82e5\u662fDeletedFinalStateUnknown\u5bf9\u8c61\uff0c\u76f4\u63a5\u8fd4\u56de\u5176key\u503c\nfunc (f *DeltaFIFO) KeyOf(obj interface{}) (string, error) {\n    if d, ok := obj.(Deltas); ok {\n        if len(d) == 0 {\n            return "", KeyError{obj, ErrZeroLengthDeltasObject}\n        }\n        obj = d.Newest().Object\n    }\n    if d, ok := obj.(DeletedFinalStateUnknown); ok {\n        return d.Key, nil\n    }\n    return f.keyFunc(obj)\n}\n\n// \u901a\u8fc7Replace()\u653e\u5165\u7b2c\u4e00\u6279\u5bf9\u8c61\u5230\u961f\u5217\u4e2d\u662f\u5426\u5df2\u7ecf\u88abPop()\u5168\u90e8\u53d6\u8d70\nfunc (f *DeltaFIFO) HasSynced() bool {\n    f.lock.Lock()\n    defer f.lock.Unlock()\n    return f.populated && f.initialPopulationCount == 0\n}\n\n// DeltaFIFO\u7684\u589e\u52a0\uff0c\u66f4\u65b0\uff0c\u5220\u9664\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u90fd\u662f\u8bb2 Delta struct list push\u5230DeltaFIFO\u4e2d\n// \u5220\u9664\u591a\u4e86\u4e2a\u68c0\u67e5indexer\u4e2d\u662f\u5426\u5b58\u5728\uff0citems\u4e2d\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u5b58\u5728\u5219\u8df3\u8fc7\u3002\u56e0\u6b64\u53ef\u80fd\u5df2\u7ecf\u88abReplace (re-list)\u4eceindexer\u4e2d\u5220\u9664\u4e86\nfunc (f *DeltaFIFO) Add(obj interface{}) error {\n    f.lock.Lock()\n    defer f.lock.Unlock()\n    f.populated = true\n    return f.queueActionLocked(Added, obj)\n}\n\nfunc (f *DeltaFIFO) Update(obj interface{}) error {\n    f.lock.Lock()\n    defer f.lock.Unlock()\n    f.populated = true\n    return f.queueActionLocked(Updated, obj)\n}\n\nfunc (f *DeltaFIFO) Delete(obj interface{}) error {\n    id, err := f.KeyOf(obj)\n    if err != nil {\n        return KeyError{obj, err}\n    }\n    f.lock.Lock()\n    defer f.lock.Unlock()\n    f.populated = true\n    if f.knownObjects == nil {\n        if _, exists := f.items[id]; !exists {\n            // Presumably, this was deleted when a relist happened.\n            // Don\'t provide a second report of the same deletion.\n            return nil\n        }\n    } else {\n        // We only want to skip the "deletion" action if the object doesn\'t\n        // exist in knownObjects and it doesn\'t have corresponding item in items.\n        // Note that even if there is a "deletion" action in items, we can ignore it,\n        // because it will be deduped automatically in "queueActionLocked"\n        _, exists, err := f.knownObjects.GetByKey(id)\n        _, itemsExist := f.items[id]\n        if err == nil && !exists && !itemsExist {\n            // Presumably, this was deleted when a relist happened.\n            // Don\'t provide a second report of the same deletion.\n            return nil\n        }\n    }\n\n    // exist in items and/or KnownObjects\n    return f.queueActionLocked(Deleted, obj)\n}\n\n// queueActionLocked \u65b9\u6cd5\u5c31\u662f\u8bb2 delta struct push\u5230 DeltaFIFO \u4e2d\u53bb\nfunc (f *DeltaFIFO) queueActionLocked(actionType DeltaType, obj interface{}) error {\n    id, err := f.KeyOf(obj)\n    if err != nil {\n        return KeyError{obj, err}\n    }\n    oldDeltas := f.items[id]\n    newDeltas := append(oldDeltas, Delta{actionType, obj})\n    newDeltas = dedupDeltas(newDeltas)\n\n    if len(newDeltas) > 0 {\n        if _, exists := f.items[id]; !exists {\n            f.queue = append(f.queue, id)\n        }\n        f.items[id] = newDeltas\n        f.cond.Broadcast()\n    } else {\n        // This never happens, because dedupDeltas never returns an empty list\n        // when given a non-empty list (as it is here).\n        // If somehow it happens anyway, deal with it but complain.\n        if oldDeltas == nil {\n            klog.Errorf("Impossible dedupDeltas for id=%q: oldDeltas=%#+v, obj=%#+v; ignoring", id, oldDeltas, obj)\n            return nil\n        }\n        klog.Errorf("Impossible dedupDeltas for id=%q: oldDeltas=%#+v, obj=%#+v; breaking invariant by storing empty Deltas", id, oldDeltas, obj)\n        f.items[id] = newDeltas\n        return fmt.Errorf("Impossible dedupDeltas for id=%q: oldDeltas=%#+v, obj=%#+v; broke DeltaFIFO invariant by storing empty Deltas", id, oldDeltas, obj)\n    }\n    return nil\n}\n\n// AddIfNotPresent\u65b9\u6cd5\u662f\u4e3a\u4e86\u914d\u7f6e RetryOnError \u4e3a true\u7684\u65f6\u5019 re-enqueue \u5b89\u5168\nfunc (f *DeltaFIFO) AddIfNotPresent(obj interface{}) error {\n    deltas, ok := obj.(Deltas)\n    if !ok {\n        return fmt.Errorf("object must be of type deltas, but got: %#v", obj)\n    }\n    id, err := f.KeyOf(deltas)\n    if err != nil {\n        return KeyError{obj, err}\n    }\n    f.lock.Lock()\n    defer f.lock.Unlock()\n    f.addIfNotPresent(id, deltas)\n    return nil\n}\n\nfunc (f *DeltaFIFO) addIfNotPresent(id string, deltas Deltas) {\n    f.populated = true\n    if _, exists := f.items[id]; exists {\n        return\n    }\n\n    f.queue = append(f.queue, id)\n    f.items[id] = deltas\n    f.cond.Broadcast()\n}\n\n// List\u65b9\u6cd5\u8fd4\u56de DeltaFIFO \u4e2d\u7684\u6240\u6709 value list\uff0cvalues\u5bf9\u5e94\u7684\u662fdeltas\uff0cvalue\u5bf9\u5e94\u7684\u662fnewest delta\nfunc (f *DeltaFIFO) List() []interface{} {\n    f.lock.RLock()\n    defer f.lock.RUnlock()\n    return f.listLocked()\n}\n\nfunc (f *DeltaFIFO) listLocked() []interface{} {\n    list := make([]interface{}, 0, len(f.items))\n    for _, item := range f.items {\n        list = append(list, item.Newest().Object)\n    }\n    return list\n}\n\n// ListKeys \u8fd4\u56de DeltaFIFO \u4e2d\u7684\u6240\u6709 key list\nfunc (f *DeltaFIFO) ListKeys() []string {\n    f.lock.RLock()\n    defer f.lock.RUnlock()\n    list := make([]string, 0, len(f.queue))\n    for _, key := range f.queue {\n        list = append(list, key)\n    }\n    return list\n}\n\n// \u6839\u636e delta \u5bf9\u8c61\uff0c\u83b7\u5f97delta\u5bf9\u5e94\u7684key\u7684 deltas\u5bf9\u8c61\nfunc (f *DeltaFIFO) Get(obj interface{}) (item interface{}, exists bool, err error) {\n    key, err := f.KeyOf(obj)\n    if err != nil {\n        return nil, false, KeyError{obj, err}\n    }\n    return f.GetByKey(key)\n}\n\nfunc (f *DeltaFIFO) GetByKey(key string) (item interface{}, exists bool, err error) {\n    f.lock.RLock()\n    defer f.lock.RUnlock()\n    d, exists := f.items[key]\n    if exists {\n        // Copy item\'s slice so operations on this slice\n        // won\'t interfere with the object we return.\n        d = copyDeltas(d)\n    }\n    return d, exists, nil\n}\n\nfunc copyDeltas(d Deltas) Deltas {\n    d2 := make(Deltas, len(d))\n    copy(d2, d)\n    return d2\n}\n\n// IsClosed \u68c0\u67e5\u662f\u5426DeltaFIFO\u5df2\u7ecfclose\nfunc (f *DeltaFIFO) IsClosed() bool {\n    f.lock.Lock()\n    defer f.lock.Unlock()\n    return f.closed\n}\n\n// DeltaFIFO\u7684pop\u65b9\u6cd5\n// \u5185\u5c42for\u5faa\u73af\u662f\u5f53DeltaFIFO\u961f\u5217\u4e3a\u7a7a\u7684\u65f6\u5019\uff0cf.cond.Wait() \u8ba9\u7a0b\u5e8fblock\u4f4f\uff0c\u7b49\u5f85\u961f\u5217\u6709push\u65b0\u7684\u5143\u7d20\n// \u4e00\u65e6DeltaFIFO close\uff0c\u4f1a\u53d1\u9001cond broadcasted\u5e7f\u64ad\uff0cblock\u6253\u65ad\uff0c\u7ee7\u7eed\u8fdb\u5165\u4e0b\u4e00\u6b21\u5185\u5c42for\u5faa\u73af\uff0c\u8fdb\u5165\u5224\u65ad\u6761\u4ef6\uff0c\u51fd\u6570\u8fd4\u56de return nil, ErrFIFOClosed\n// \u82e5\u662f f.initialPopulationCount > 0 \u5373\u9996\u6b21\uff0c\u7b2c\u4e00\u6279\u5bf9\u8c61\u653e\u5165FIFO\uff0c\u51cf\u51cf\n// \u7b2c\u4e8c\u5c42for\u5faa\u73af\u662f\u4e3a\u4e86\u5728 item, ok := f.items[id] \u5931\u8d25\u7684\u65f6\u5019\uff0cpop FIFO\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\n// \u82e5\u4e00\u5207\u6b63\u5e38\uff0c\u5219\u79fb\u9664queue[0]\uff0c\u540e\u9762\u7684index\u5168\u90e8\u5de6\u79fb\u4e00\u4f4d\uff1b\u5220\u9664pod\u51fa\u6765\u7684\u5143\u7d20\uff0c\u51fd\u6570\u8fd4\u56de return item, err\n// \u82e5pop\u51fa\u6765\u7684\u5143\u7d20 process PopProcessFunc(item) \u5931\u8d25\uff0cf.addIfNotPresent(id, item) \u518d\u6b21\u5c06\u5143\u7d20push \u56de DeltaFIFO\nfunc (f *DeltaFIFO) Pop(process PopProcessFunc) (interface{}, error) {\n    f.lock.Lock()\n    defer f.lock.Unlock()\n    for {\n        for len(f.queue) == 0 {\n            // When the queue is empty, invocation of Pop() is blocked until new item is enqueued.\n            // When Close() is called, the f.closed is set and the condition is broadcasted.\n            // Which causes this loop to continue and return from the Pop().\n            if f.closed {\n                return nil, ErrFIFOClosed\n            }\n\n            f.cond.Wait()\n        }\n        id := f.queue[0]\n        f.queue = f.queue[1:]\n        depth := len(f.queue)\n        if f.initialPopulationCount > 0 {\n            f.initialPopulationCount--\n        }\n        item, ok := f.items[id]\n        if !ok {\n            // This should never happen\n            klog.Errorf("Inconceivable! %q was in f.queue but not f.items; ignoring.", id)\n            continue\n        }\n        delete(f.items, id)\n        // Only log traces if the queue depth is greater than 10 and it takes more than\n        // 100 milliseconds to process one item from the queue.\n        // Queue depth never goes high because processing an item is locking the queue,\n        // and new items can\'t be added until processing finish.\n        // https://github.com/kubernetes/kubernetes/issues/103789\n        if depth > 10 {\n            trace := utiltrace.New("DeltaFIFO Pop Process",\n                utiltrace.Field{Key: "ID", Value: id},\n                utiltrace.Field{Key: "Depth", Value: depth},\n                utiltrace.Field{Key: "Reason", Value: "slow event handlers blocking the queue"})\n            defer trace.LogIfLong(100 * time.Millisecond)\n        }\n        err := process(item)\n        if e, ok := err.(ErrRequeue); ok {\n            f.addIfNotPresent(id, item)\n            err = e.Err\n        }\n        // Don\'t need to copyDeltas here, because we\'re transferring\n        // ownership to the caller.\n        return item, err\n    }\n}\n')),(0,o.kt)("p",null,(0,o.kt)("img",{src:t(6835).Z,width:"1159",height:"688"})))}f.isMDXComponent=!0},2340:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/2022-12-06-15-28-32-9c4a782d2fbab8e57d34e30ac4ef1d6c.png"},6835:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/2022-12-06-16-52-02-576d91736bd03871b7a5a660c1e730f4.png"}}]);