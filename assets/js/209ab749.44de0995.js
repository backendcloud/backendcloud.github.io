"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3759],{3905:(e,r,n)=>{n.d(r,{Zo:()=>p,kt:()=>d});var o=n(7294);function t(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){t(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function a(e,r){if(null==e)return{};var n,o,t=function(e,r){if(null==e)return{};var n,o,t={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],r.indexOf(n)>=0||(t[n]=e[n]);return t}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var c=o.createContext({}),u=function(e){var r=o.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},p=function(e){var r=u(e.components);return o.createElement(c.Provider,{value:r},e.children)},l="mdxType",v={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},g=o.forwardRef((function(e,r){var n=e.components,t=e.mdxType,i=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),l=u(n),g=t,d=l["".concat(c,".").concat(g)]||l[g]||v[g]||i;return n?o.createElement(d,s(s({ref:r},p),{},{components:n})):o.createElement(d,s({ref:r},p))}));function d(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var i=n.length,s=new Array(i);s[0]=g;var a={};for(var c in r)hasOwnProperty.call(r,c)&&(a[c]=r[c]);a.originalType=e,a[l]="string"==typeof e?e:t,s[1]=a;for(var u=2;u<i;u++)s[u]=n[u];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7957:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>v,frontMatter:()=>i,metadata:()=>a,toc:()=>u});var o=n(7462),t=(n(7294),n(3905));const i={title:"client-go \u6e90\u7801\u5206\u6790\uff081\uff09 - discovery\u6a21\u5757\uff1adiscoveryclient\u83b7\u53d6\u6240\u6709\u7684gv\u548cgvr",readmore:!1,date:new Date("2022-11-24T12:21:32.000Z"),categories:"\u4e91\u539f\u751f",tags:["client-go"]},s=void 0,a={unversionedId:"cloud-native/client-go/client-go-01",id:"cloud-native/client-go/client-go-01",title:"client-go \u6e90\u7801\u5206\u6790\uff081\uff09 - discovery\u6a21\u5757\uff1adiscoveryclient\u83b7\u53d6\u6240\u6709\u7684gv\u548cgvr",description:"\u672c\u7bc7\u662fclient-go\u6e90\u7801\u5206\u6790\u7684\u7b2c\u4e00\u7bc7\uff0cclient-go\u662f\u4ece\u4e8bKubernetes\u5f00\u53d1\u5fc5\u7814\u7a76\u7684\u9879\u76ee\uff0cclient-go\u4e4b\u6240\u4ee5\u91cd\u8981\uff0c\u4e3b\u8981\u5728\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a",source:"@site/docs/cloud-native/client-go/client-go-01.md",sourceDirName:"cloud-native/client-go",slug:"/cloud-native/client-go/client-go-01",permalink:"/docs/cloud-native/client-go/client-go-01",draft:!1,editUrl:"https://github.com/backendcloud/docusaurus/tree/main/docs/cloud-native/client-go/client-go-01.md",tags:[{label:"client-go",permalink:"/docs/tags/client-go"}],version:"current",frontMatter:{title:"client-go \u6e90\u7801\u5206\u6790\uff081\uff09 - discovery\u6a21\u5757\uff1adiscoveryclient\u83b7\u53d6\u6240\u6709\u7684gv\u548cgvr",readmore:!1,date:"2022-11-24T12:21:32.000Z",categories:"\u4e91\u539f\u751f",tags:["client-go"]},sidebar:"tutorialSidebar",previous:{title:"client-go",permalink:"/docs/category/client-go"},next:{title:"client-go \u6e90\u7801\u5206\u6790\uff082\uff09 - discovery\u6a21\u5757\uff1adiscovery cache",permalink:"/docs/cloud-native/client-go/client-go-02"}},c={},u=[],p={toc:u},l="wrapper";function v(e){let{components:r,...i}=e;return(0,t.kt)(l,(0,o.Z)({},p,i,{components:r,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"\u672c\u7bc7\u662fclient-go\u6e90\u7801\u5206\u6790\u7684\u7b2c\u4e00\u7bc7\uff0cclient-go\u662f\u4ece\u4e8bKubernetes\u5f00\u53d1\u5fc5\u7814\u7a76\u7684\u9879\u76ee\uff0cclient-go\u4e4b\u6240\u4ee5\u91cd\u8981\uff0c\u4e3b\u8981\u5728\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"\u662f\u8c03\u7528Kubernetes API\u7684\u552f\u4e00\u7684golang\u5b98\u65b9\u5e93\u3002\u6bd4\u5982\u5e38\u7528\u5230\u7684\u547d\u4ee4\u884c\u5de5\u5177kubectl\u9879\u76ee\u5c31\u662f\u901a\u8fc7client-go\u548cKubernetes API\u6253\u4ea4\u9053\u3002"),(0,t.kt)("li",{parentName:"ul"},"\u5728Kubernetes\u6e90\u7801\u4e2d\uff0c\u5982\u679cKubernetes\u7684\u67d0\u4e2a\u7ec4\u4ef6\uff0c\u9700\u8981List/Get Kubernetes\u4e2d\u7684Object\uff0c\u5728\u7edd\u5927\u591a \u6570\u60c5\u51b5\u4e0b\uff0c\u4f1a\u76f4\u63a5\u4f7f\u7528client-go\u4e2d\u7684Informer\u5b9e\u4f8b\u4e2d\u7684Lister()\u65b9\u6cd5\uff08\u8be5\u65b9\u6cd5\u5305\u542b \u4e86 Get \u548c List \u65b9\u6cd5\uff09\uff0c\u800c\u5f88\u5c11\u76f4\u63a5\u8bf7\u6c42Kubernetes API\u3002"),(0,t.kt)("li",{parentName:"ul"},"\u7528operator sdk\u5f00\u53d1\u81ea\u5df1\u7684crd\u548ccustom controller\u5f00\u53d1\uff0c\u5fc5\u987b\u8981\u7528\u5230\u7684golang\u5e93\uff0c\u56e0\u4e3akubernetes\u6613\u6269\u5c55\u7684\u67b6\u6784\u8bbe\u8ba1\uff0c\u53ea\u8981\u662f\u57fa\u4e8ekubernetes\u4e8c\u6b21\u5f00\u53d1\u7684\u9879\u76ee\uff0c\u57fa\u672c\u90fd\u8981\u5f00\u53d1\u81ea\u5df1\u5b9a\u5236\u7684crd\u548ccontroller\u3002")),(0,t.kt)("p",null,"\u672c\u7bc7\u4ece\u76f8\u5bf9\u7b80\u5355\u7684discovery\u5305\u5f00\u59cb\uff1a"),(0,t.kt)("p",null,(0,t.kt)("img",{src:n(9643).Z,width:"1073",height:"467"})),(0,t.kt)("p",null,"discovery\u5305\u7684\u4e3b\u8981\u4f5c\u7528\u5c31\u662f\u63d0\u4f9b\u5f53\u524dk8s\u96c6\u7fa4\u652f\u6301\u54ea\u4e9b\u8d44\u6e90\u4ee5\u53ca\u7248\u672c\u4fe1\u606f\u3002"),(0,t.kt)("p",null,"Kubernetes API Server\u66b4\u9732\u51fa/api\u548c/apis\u63a5\u53e3\u3002DiscoveryClient\u901a\u8fc7RESTClient\u5206\u522b\u8bf7\u6c42/api\u548c/apis\u63a5\u53e3\uff0c\u4ece\u800c\u83b7\u53d6Kubernetes API Server\u6240\u652f\u6301\u7684\u8d44\u6e90\u7ec4\u3001\u8d44\u6e90\u7248\u4fe1\u606f\u3002\u8fd9\u4e2a\u662f\u901a\u8fc7ServerGroups\u51fd\u6570\u5b9e\u73b0\u7684\uff0c\u6709\u4e86group, version\u4fe1\u606f\u540e\uff0c\u4f46\u662f\u8fd8\u662f\u4e0d\u591f\uff0c\u56e0\u4e3a\u8fd8\u6ca1\u6709\u5177\u4f53\u5230\u8d44\u6e90\u3002ServerGroupsAndResources \u5c31\u83b7\u5f97\u4e86\u6240\u6709\u7684\u8d44\u6e90\u4fe1\u606f\uff08\u6240\u6709\u7684GVR\u8d44\u6e90\u4fe1\u606f\uff09\uff0c\u800c\u5728Resource\u8d44\u6e90\u7684\u5b9a\u4e49\u4e2d\uff0c\u4f1a\u5b9a\u4e49\u597d\u8be5\u8d44\u6e90\u652f\u6301\u54ea\u4e9b\u64cd\u4f5c\uff1alist, delelte ,get\u7b49\u7b49\u3002"),(0,t.kt)("p",null,"\u6240\u4ee5kubectl\u4e2d\u5c31\u4f7f\u7528discovery\u505a\u4e86\u8d44\u6e90\u7684\u6821\u9a8c\u3002\u83b7\u53d6\u6240\u6709\u8d44\u6e90\u7684\u7248\u672c\u4fe1\u606f\uff0c\u4ee5\u53ca\u652f\u6301\u7684\u64cd\u4f5c\u3002\u5c31\u53ef\u4ee5\u5224\u65ad\u5ba2\u6237\u7aef\u5f53\u524d\u64cd\u4f5c\u662f\u5426\u5408\u7406\u3002"),(0,t.kt)("p",null,"\u5148\u4e0a\u8c03\u7528discovery\u5305\u83b7\u53d6\u6240\u6709gv\u548cgvr\u4fe1\u606f\u7684\u4ee3\u7801\uff1a"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n\n    "k8s.io/apimachinery/pkg/runtime/schema"\n    "k8s.io/client-go/discovery"\n    "k8s.io/client-go/tools/clientcmd"\n)\n\nfunc main() {\n    // \u52a0\u8f7dkubeconfig\u6587\u4ef6\uff0c\u751f\u6210config\u5bf9\u8c61\n    config, err := clientcmd.BuildConfigFromFlags("", "C:\\\\Users\\\\hanwei\\\\config")\n    if err != nil {\n        panic(err)\n    }\n\n    // discovery.NewDiscoveryClientForConfigg\u51fd\u6570\u901a\u8fc7config\u5b9e\u4f8b\u5316discoveryClient\u5bf9\u8c61\n    discoveryClient, err := discovery.NewDiscoveryClientForConfig(config)\n    if err != nil {\n        panic(err)\n    }\n\n    // discoveryClient.ServerGroupsAndResources \u8fd4\u56deAPI Server\u6240\u652f\u6301\u7684\u8d44\u6e90\u7ec4\u3001\u8d44\u6e90\u7248\u672c\u3001\u8d44\u6e90\u4fe1\u606f\n    _, APIResourceList, err := discoveryClient.ServerGroupsAndResources()\n    if err != nil {\n        panic(err)\n    }\n\n    // \u8f93\u51fa\u6240\u6709\u8d44\u6e90\u4fe1\u606f\n    for _, list := range APIResourceList {\n        gv, err := schema.ParseGroupVersion(list.GroupVersion)\n        if err != nil {\n            panic(err)\n        }\n\n        for _, resource := range list.APIResources {\n            fmt.Printf("NAME: %v, GROUP: %v, VERSION: %v \\n", resource.Name, gv.Group, gv.Version)\n        }\n    }\n}\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"OROOT=C:\\go\\go1.19 #gosetup\nGOPATH=C:\\Users\\hanwei\\go #gosetup\nC:\\go\\go1.19\\bin\\go.exe build -o C:\\Users\\hanwei\\AppData\\Local\\Temp\\GoLand\\___go_build_main_go.exe C:\\Users\\hanwei\\Documents\\GoProject\\lab\\lab01\\main.go #gosetup\nC:\\Users\\hanwei\\AppData\\Local\\Temp\\GoLand\\___go_build_main_go.exe\n... // \u7701\u7565\nNAME: pods, GROUP: , VERSION: v1\nNAME: pods/attach, GROUP: , VERSION: v1\nNAME: pods/binding, GROUP: , VERSION: v1\nNAME: pods/eviction, GROUP: , VERSION: v1\nNAME: pods/exec, GROUP: , VERSION: v1\nNAME: pods/log, GROUP: , VERSION: v1\nNAME: pods/portforward, GROUP: , VERSION: v1\nNAME: pods/proxy, GROUP: , VERSION: v1\nNAME: pods/status, GROUP: , VERSION: v1\nNAME: challenges/status, GROUP: acme.cert-manager.io, VERSION: v1\nNAME: cephbucketnotifications, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephbucketnotifications/status, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephnfses, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephnfses/status, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephfilesystemsubvolumegroups, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephfilesystemsubvolumegroups/status, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephfilesystemmirrors, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephfilesystemmirrors/status, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephblockpools, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephblockpools/status, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephobjectstores, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephobjectstores/status, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephclusters, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephclusters/status, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephobjectzones, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephobjectzones/status, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephrbdmirrors, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephrbdmirrors/status, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephblockpoolradosnamespaces, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephblockpoolradosnamespaces/status, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephobjectrealms, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephobjectrealms/status, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephclients, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephclients/status, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephobjectstoreusers, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephobjectstoreusers/status, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephfilesystems, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephfilesystems/status, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephobjectzonegroups, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephobjectzonegroups/status, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephbuckettopics, GROUP: ceph.rook.io, VERSION: v1\nNAME: cephbuckettopics/status, GROUP: ceph.rook.io, VERSION: v1\nNAME: virtualmachineinstancereplicasets, GROUP: kubevirt.io, VERSION: v1\nNAME: virtualmachineinstancereplicasets/status, GROUP: kubevirt.io, VERSION: v1\nNAME: virtualmachineinstancereplicasets/scale, GROUP: kubevirt.io, VERSION: v1\nNAME: virtualmachineinstancepresets, GROUP: kubevirt.io, VERSION: v1\nNAME: virtualmachineinstancemigrations, GROUP: kubevirt.io, VERSION: v1\nNAME: virtualmachineinstancemigrations/status, GROUP: kubevirt.io, VERSION: v1\nNAME: kubevirts, GROUP: kubevirt.io, VERSION: v1\nNAME: kubevirts/status, GROUP: kubevirt.io, VERSION: v1\nNAME: virtualmachineinstances, GROUP: kubevirt.io, VERSION: v1\nNAME: virtualmachines, GROUP: kubevirt.io, VERSION: v1\nNAME: virtualmachines/status, GROUP: kubevirt.io, VERSION: v1\nNAME: virtualmachineinstancereplicasets, GROUP: kubevirt.io, VERSION: v1alpha3\nNAME: virtualmachineinstancereplicasets/status, GROUP: kubevirt.io, VERSION: v1alpha3\nNAME: virtualmachineinstancereplicasets/scale, GROUP: kubevirt.io, VERSION: v1alpha3\nNAME: virtualmachineinstancepresets, GROUP: kubevirt.io, VERSION: v1alpha3\nNAME: virtualmachineinstancemigrations, GROUP: kubevirt.io, VERSION: v1alpha3\nNAME: virtualmachineinstancemigrations/status, GROUP: kubevirt.io, VERSION: v1alpha3\nNAME: kubevirts, GROUP: kubevirt.io, VERSION: v1alpha3\nNAME: kubevirts/status, GROUP: kubevirt.io, VERSION: v1alpha3\nNAME: virtualmachineinstances, GROUP: kubevirt.io, VERSION: v1alpha3\nNAME: virtualmachines, GROUP: kubevirt.io, VERSION: v1alpha3\nNAME: virtualmachines/status, GROUP: kubevirt.io, VERSION: v1alpha3\n... // \u7701\u7565\n\nProcess finished with the exit code 0\n")),(0,t.kt)("p",null,"kubectl api-resources \u548c kubectl api-versions \u8fd9\u4e24\u6761\u547d\u4ee4\u4e5f\u662f\u8c03\u7528\u7684\u8be5discover\u5305\u3002"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'[root@k8s-11 .kube]# kubectl |grep api\n  api-resources Print the supported API resources on the server\n  api-versions  Print the supported API versions on the server, in the form of "group/version"\n')),(0,t.kt)("p",null,"\u4e0a\u9762\u7684main\u65b9\u6cd5\uff0c\u5206\u4e3a4\u6b65\uff1a"),(0,t.kt)("p",null,"step1\uff1aclientcmd.BuildConfigFromFlags \u51fd\u6570\u8fd4\u56de config\u5bf9\u8c61\uff0c\u8fd9\u91cc\u7528\u4e86kubeconfig\u7684\u672c\u5730\u8def\u5f84\u3002"),(0,t.kt)("p",null,"step2\uff1adiscovery.NewDiscoveryClientForConfig \u51fd\u6570\u8fd4\u56de DiscoveryClient\u5bf9\u8c61\u3002"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-go"},'func BuildConfigFromFlags(masterUrl, kubeconfigPath string) (*restclient.Config, error) {\n    if kubeconfigPath == "" && masterUrl == "" {\n        klog.Warning("Neither --kubeconfig nor --master was specified.  Using the inClusterConfig.  This might not work.")\n        kubeconfig, err := restclient.InClusterConfig()\n        if err == nil {\n            return kubeconfig, nil\n        }\n        klog.Warning("error creating inClusterConfig, falling back to default config: ", err)\n    }\n    return NewNonInteractiveDeferredLoadingClientConfig(\n        &ClientConfigLoadingRules{ExplicitPath: kubeconfigPath},\n        &ConfigOverrides{ClusterInfo: clientcmdapi.Cluster{Server: masterUrl}}).ClientConfig()\n}\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-go"},"func NewDiscoveryClientForConfig(c *restclient.Config) (*DiscoveryClient, error) {\n    config := *c\n    if err := setDiscoveryDefaults(&config); err != nil {\n        return nil, err\n    }\n    httpClient, err := restclient.HTTPClientFor(&config)\n    if err != nil {\n        return nil, err\n    }\n    return NewDiscoveryClientForConfigAndClient(&config, httpClient)\n}\n")),(0,t.kt)("p",null,"step3\uff1adiscoveryClient.ServerGroupsAndResources \u51fd\u6570\u76f8\u5bf9\u7ed5\u4e00\u70b9\u3002"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-go"},"func (d *DiscoveryClient) ServerGroupsAndResources() ([]*metav1.APIGroup, []*metav1.APIResourceList, error) {\n    return withRetries(defaultRetries, func() ([]*metav1.APIGroup, []*metav1.APIResourceList, error) {\n        return ServerGroupsAndResources(d)\n    })\n}\n")),(0,t.kt)("p",null,"withRetries \u51fd\u6570 \u591a\u6b21\u5c1d\u8bd5\u6267\u884c \u51fd\u6570 ServerGroupsAndResources(d DiscoveryInterface) ([]",(0,t.kt)("em",{parentName:"p"},"metav1.APIGroup, []"),"metav1.APIResourceList, error) \uff0c\u8be5\u51fd\u6570\u7684\u5f62\u5f0f\u53c2\u6570\u662finterface\uff0c\u7528\u5230\u4e86golang\u4e2d\u7684\u591a\u6001\u3002\u56e0\u4e3a\u5b9e\u53c2\u662f\u7ed3\u6784\u4f53DiscoveryClient\uff0c\u6240\u4ee5\u591a\u6001\u4f1a\u8c03\u7528DiscoveryClient\u4e0b\u5bf9\u5e94\u7684\u5177\u4f53\u65b9\u6cd5\u3002"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-go"},"func ServerGroupsAndResources(d DiscoveryInterface) ([]*metav1.APIGroup, []*metav1.APIResourceList, error) {\n    sgs, err := d.ServerGroups()\n    if sgs == nil {\n        return nil, nil, err\n    }\n    resultGroups := []*metav1.APIGroup{}\n    for i := range sgs.Groups {\n        resultGroups = append(resultGroups, &sgs.Groups[i])\n    }\n\n    groupVersionResources, failedGroups := fetchGroupVersionResources(d, sgs)\n\n    // order results by group/version discovery order\n    result := []*metav1.APIResourceList{}\n    for _, apiGroup := range sgs.Groups {\n        for _, version := range apiGroup.Versions {\n            gv := schema.GroupVersion{Group: apiGroup.Name, Version: version.Version}\n            if resources, ok := groupVersionResources[gv]; ok {\n                result = append(result, resources)\n            }\n        }\n    }\n\n    if len(failedGroups) == 0 {\n        return resultGroups, result, nil\n    }\n\n    return resultGroups, result, &ErrGroupDiscoveryFailed{Groups: failedGroups}\n}\n")),(0,t.kt)("p",null,"ServerGroupsAndResources(d DiscoveryInterface) ([]",(0,t.kt)("em",{parentName:"p"},"metav1.APIGroup, []"),"metav1.APIResourceList, error) \u4e3b\u8981\u5c31\u662f \u8c03\u7528\u4e86 d.ServerGroups() \u4ee5\u53ca fetchGroupVersionResources(d, sgs) \u4e24\u4e2a\u65b9\u6cd5\uff0c\u5206\u522b\u83b7\u53d6group\u4fe1\u606f\u548cresource\u4fe1\u606f\u3002"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-go"},"type ServerGroupsInterface interface {\n    // ServerGroups returns the supported groups, with information like supported versions and the\n    // preferred version.\n    ServerGroups() (*metav1.APIGroupList, error)\n}\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-go"},'func (d *DiscoveryClient) ServerGroups() (apiGroupList *metav1.APIGroupList, err error) {\n    // Get the groupVersions exposed at /api\n    v := &metav1.APIVersions{}\n    err = d.restClient.Get().AbsPath(d.LegacyPrefix).Do(context.TODO()).Into(v)\n    apiGroup := metav1.APIGroup{}\n    if err == nil && len(v.Versions) != 0 {\n        apiGroup = apiVersionsToAPIGroup(v)\n    }\n    if err != nil && !errors.IsNotFound(err) && !errors.IsForbidden(err) {\n        return nil, err\n    }\n\n    // Get the groupVersions exposed at /apis\n    apiGroupList = &metav1.APIGroupList{}\n    err = d.restClient.Get().AbsPath("/apis").Do(context.TODO()).Into(apiGroupList)\n    if err != nil && !errors.IsNotFound(err) && !errors.IsForbidden(err) {\n        return nil, err\n    }\n    // to be compatible with a v1.0 server, if it\'s a 403 or 404, ignore and return whatever we got from /api\n    if err != nil && (errors.IsNotFound(err) || errors.IsForbidden(err)) {\n        apiGroupList = &metav1.APIGroupList{}\n    }\n\n    // prepend the group retrieved from /api to the list if not empty\n    if len(v.Versions) != 0 {\n        apiGroupList.Groups = append([]metav1.APIGroup{apiGroup}, apiGroupList.Groups...)\n    }\n    return apiGroupList, nil\n}\n')),(0,t.kt)("p",null,"func (d ",(0,t.kt)("em",{parentName:"p"},"DiscoveryClient) ServerGroups() (apiGroupList "),"metav1.APIGroupList, err error) \u8c03\u7528restClient Get\u65b9\u6cd5\u8bbf\u95eeKubernetes API\uff0c\u83b7\u53d6apiGroup\u4fe1\u606f\uff0c\u8c03\u7528\u4e86\u4e24\u6b21\uff0c\u5206\u522b\u662f\u5386\u53f2\u9057\u7559\u7684/api\u63a5\u53e3\uff0c\u5bf9\u5e94corev1\uff0c\u8fd8\u6709\u5c31\u662f\u6709gv\u5177\u4f53\u540d\u79f0\u7684/apis\u63a5\u53e3\u3002"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-go"},"func fetchGroupVersionResources(d DiscoveryInterface, apiGroups *metav1.APIGroupList) (map[schema.GroupVersion]*metav1.APIResourceList, map[schema.GroupVersion]error) {\n    groupVersionResources := make(map[schema.GroupVersion]*metav1.APIResourceList)\n    failedGroups := make(map[schema.GroupVersion]error)\n\n    wg := &sync.WaitGroup{}\n    resultLock := &sync.Mutex{}\n    for _, apiGroup := range apiGroups.Groups {\n        for _, version := range apiGroup.Versions {\n            groupVersion := schema.GroupVersion{Group: apiGroup.Name, Version: version.Version}\n            wg.Add(1)\n            go func() {\n                defer wg.Done()\n                defer utilruntime.HandleCrash()\n\n                apiResourceList, err := d.ServerResourcesForGroupVersion(groupVersion.String())\n\n                // lock to record results\n                resultLock.Lock()\n                defer resultLock.Unlock()\n\n                if err != nil {\n                    // TODO: maybe restrict this to NotFound errors\n                    failedGroups[groupVersion] = err\n                }\n                if apiResourceList != nil {\n                    // even in case of error, some fallback might have been returned\n                    groupVersionResources[groupVersion] = apiResourceList\n                }\n            }()\n        }\n    }\n    wg.Wait()\n\n    return groupVersionResources, failedGroups\n}\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-go"},'func (d *DiscoveryClient) ServerResourcesForGroupVersion(groupVersion string) (resources *metav1.APIResourceList, err error) {\n    url := url.URL{}\n    if len(groupVersion) == 0 {\n        return nil, fmt.Errorf("groupVersion shouldn\'t be empty")\n    }\n    if len(d.LegacyPrefix) > 0 && groupVersion == "v1" {\n        url.Path = d.LegacyPrefix + "/" + groupVersion\n    } else {\n        url.Path = "/apis/" + groupVersion\n    }\n    resources = &metav1.APIResourceList{\n        GroupVersion: groupVersion,\n    }\n    err = d.restClient.Get().AbsPath(url.String()).Do(context.TODO()).Into(resources)\n    if err != nil {\n        // ignore 403 or 404 error to be compatible with an v1.0 server.\n        if groupVersion == "v1" && (errors.IsNotFound(err) || errors.IsForbidden(err)) {\n            return resources, nil\n        }\n        return nil, err\n    }\n    return resources, nil\n}\n')),(0,t.kt)("p",null,"\u56e0\u4e3a\u83b7\u53d6gv\u5bf9\u5e94\u7684resouce\u4fe1\u606f\u9700\u8981\u6bcf\u4e00\u4e2agv\u90fd\u9700\u8981\u53d1\u9001\u4e00\u4e2arest\u8bf7\u6c42\uff0c\u5927\u91cfrest\u8bf7\u6c42\u6bd4\u8f83\u8017\u65f6\uff0c\u4e3a\u4e86\u52a0\u5feb\u901f\u5ea6\uff0cfetchGroupVersionResources \u65b9\u6cd5\u91c7\u53d6go\u534f\u7a0b\u540c\u65f6\u5e76\u53d1\u7684\u65b9\u5f0f\u53d1\u9001rest api\u8bf7\u6c42\u3002"),(0,t.kt)("p",null,"step4\uff1a\u6700\u540e\u5c06\u67e5\u5230\u7684\u53d8\u91cfAPIResourceList\u901a\u8fc7\u4e24\u5c42for\u5faa\u73af\u8f93\u51fa\u6240\u6709\u7684resouce\u4fe1\u606f\u3002"))}v.isMDXComponent=!0},9643:(e,r,n)=>{n.d(r,{Z:()=>o});const o=n.p+"assets/images/2022-11-24-13-55-08-7fe577db449e224870e7cadc69b50081.png"}}]);