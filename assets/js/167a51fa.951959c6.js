"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1996],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(t),h=o,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||i;return t?r.createElement(m,a(a({ref:n},u),{},{components:t})):r.createElement(m,a({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=h;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[d]="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},5544:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const i={title:"client-go \u6e90\u7801\u5206\u6790\uff0810\uff09 - \u4f7f\u7528client-go\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355controller\u7684\u4f8b\u5b50",readmore:!0,date:new Date("2022-12-16T12:38:33.000Z"),categories:"\u4e91\u539f\u751f",tags:["client-go"]},a=void 0,c={unversionedId:"cloud-native/client-go/client-go-10",id:"cloud-native/client-go/client-go-10",title:"client-go \u6e90\u7801\u5206\u6790\uff0810\uff09 - \u4f7f\u7528client-go\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355controller\u7684\u4f8b\u5b50",description:"\u4e0b\u9762\u7684example\u4e5f\u662fclient-go\u5b98\u65b9\u7684\u4f8b\u5b50\u3002\u901a\u8fc7\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6b63\u597d\u628a\u4e4b\u524d\u7684\u6e90\u7801\u5206\u6790\u7684\u4e00\u4e2a\u4e2a\u6a21\u5757\u90fd\u4e32\u8d77\u6765\u4e86\u3002",source:"@site/docs/cloud-native/client-go/client-go-10.md",sourceDirName:"cloud-native/client-go",slug:"/cloud-native/client-go/client-go-10",permalink:"/docs/cloud-native/client-go/client-go-10",draft:!1,editUrl:"https://github.com/backendcloud/backendcloud.github.io/tree/main/docs/cloud-native/client-go/client-go-10.md",tags:[{label:"client-go",permalink:"/docs/tags/client-go"}],version:"current",frontMatter:{title:"client-go \u6e90\u7801\u5206\u6790\uff0810\uff09 - \u4f7f\u7528client-go\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355controller\u7684\u4f8b\u5b50",readmore:!0,date:"2022-12-16T12:38:33.000Z",categories:"\u4e91\u539f\u751f",tags:["client-go"]},sidebar:"tutorialSidebar",previous:{title:"client-go \u6e90\u7801\u5206\u6790\uff089\uff09 - workerqueue\u4e4b\u9650\u901f\u961f\u5217RateLimitingQueue",permalink:"/docs/cloud-native/client-go/client-go-09"},next:{title:"\u901a\u7528\u4eba\u5de5\u667a\u80fd",permalink:"/docs/category/\u901a\u7528\u4eba\u5de5\u667a\u80fd"}},s={},l=[],u={toc:l},d="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u4e0b\u9762\u7684example\u4e5f\u662fclient-go\u5b98\u65b9\u7684\u4f8b\u5b50\u3002\u901a\u8fc7\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6b63\u597d\u628a\u4e4b\u524d\u7684\u6e90\u7801\u5206\u6790\u7684\u4e00\u4e2a\u4e2a\u6a21\u5757\u90fd\u4e32\u8d77\u6765\u4e86\u3002"),(0,o.kt)("p",null,"main\u65b9\u6cd5\u91cc\u6784\u9020indexer\uff0cqueue\uff0cinformer\uff0c\u4ece\u800c\u6784\u9020\u81ea\u5df1\u7684Controller\u3002\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d processNextItem\u65b9\u6cd5\u4e00\u76f4\u5728\u6267\u884c\uff0c\u4ece\u9650\u901f\u961f\u5217\u4e2d\u53d6\u51faitem\u8fdb\u884c\u5904\u7406\u3002\u5904\u7406\u65b9\u6cd5\u662fsyncToStdout\uff0csyncToStdout \u662f\u63a7\u5236\u5668\u7684\u4e1a\u52a1\u903b\u8f91\u3002\u5728\u6b64\u63a7\u5236\u5668\u4e2d\uff0c\u4e1a\u52a1\u903b\u8f91\u53ea\u662f\u5c06\u6709\u5173 pod \u7684\u4fe1\u606f\u6253\u5370\u5230 stdout\u3002\u5982\u679c\u53d1\u751f\u9519\u8bef\uff0c\u7b80\u5355\u5730\u8fd4\u56de\u9519\u8bef\u3002\u91cd\u8bd5\u903b\u8f91\u4e0d\u5e94\u662f\u4e1a\u52a1\u903b\u8f91\u7684\u4e00\u90e8\u5206\u3002\u91cd\u8bd5\u903b\u8f91\u653e\u5728\u5355\u72ec\u7684\u65b9\u6cd5handleErr\u4e2d\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'/*\nCopyright 2017 The Kubernetes Authors.\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage main\n\nimport (\n    "flag"\n    "fmt"\n    "time"\n\n    "k8s.io/klog/v2"\n\n    v1 "k8s.io/api/core/v1"\n    meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"\n    "k8s.io/apimachinery/pkg/fields"\n    "k8s.io/apimachinery/pkg/util/runtime"\n    "k8s.io/apimachinery/pkg/util/wait"\n    "k8s.io/client-go/kubernetes"\n    "k8s.io/client-go/tools/cache"\n    "k8s.io/client-go/tools/clientcmd"\n    "k8s.io/client-go/util/workqueue"\n)\n\n// Controller demonstrates how to implement a controller with client-go.\ntype Controller struct {\n    indexer  cache.Indexer\n    queue    workqueue.RateLimitingInterface\n    informer cache.Controller\n}\n\n// NewController creates a new Controller.\nfunc NewController(queue workqueue.RateLimitingInterface, indexer cache.Indexer, informer cache.Controller) *Controller {\n    return &Controller{\n        informer: informer,\n        indexer:  indexer,\n        queue:    queue,\n    }\n}\n\nfunc (c *Controller) processNextItem() bool {\n    // Wait until there is a new item in the working queue\n    key, quit := c.queue.Get()\n    if quit {\n        return false\n    }\n    // Tell the queue that we are done with processing this key. This unblocks the key for other workers\n    // This allows safe parallel processing because two pods with the same key are never processed in\n    // parallel.\n    defer c.queue.Done(key)\n\n    // Invoke the method containing the business logic\n    err := c.syncToStdout(key.(string))\n    // Handle the error if something went wrong during the execution of the business logic\n    c.handleErr(err, key)\n    return true\n}\n\n// syncToStdout is the business logic of the controller. In this controller it simply prints\n// information about the pod to stdout. In case an error happened, it has to simply return the error.\n// The retry logic should not be part of the business logic.\nfunc (c *Controller) syncToStdout(key string) error {\n    obj, exists, err := c.indexer.GetByKey(key)\n    if err != nil {\n        klog.Errorf("Fetching object with key %s from store failed with %v", key, err)\n        return err\n    }\n\n    if !exists {\n        // Below we will warm up our cache with a Pod, so that we will see a delete for one pod\n        fmt.Printf("Pod %s does not exist anymore\\n", key)\n    } else {\n        // Note that you also have to check the uid if you have a local controlled resource, which\n        // is dependent on the actual instance, to detect that a Pod was recreated with the same name\n        fmt.Printf("Sync/Add/Update for Pod %s\\n", obj.(*v1.Pod).GetName())\n    }\n    return nil\n}\n\n// handleErr checks if an error happened and makes sure we will retry later.\nfunc (c *Controller) handleErr(err error, key interface{}) {\n    if err == nil {\n        // Forget about the #AddRateLimited history of the key on every successful synchronization.\n        // This ensures that future processing of updates for this key is not delayed because of\n        // an outdated error history.\n        c.queue.Forget(key)\n        return\n    }\n\n    // This controller retries 5 times if something goes wrong. After that, it stops trying.\n    if c.queue.NumRequeues(key) < 5 {\n        klog.Infof("Error syncing pod %v: %v", key, err)\n\n        // Re-enqueue the key rate limited. Based on the rate limiter on the\n        // queue and the re-enqueue history, the key will be processed later again.\n        c.queue.AddRateLimited(key)\n        return\n    }\n\n    c.queue.Forget(key)\n    // Report to an external entity that, even after several retries, we could not successfully process this key\n    runtime.HandleError(err)\n    klog.Infof("Dropping pod %q out of the queue: %v", key, err)\n}\n\n// Run begins watching and syncing.\nfunc (c *Controller) Run(workers int, stopCh chan struct{}) {\n    defer runtime.HandleCrash()\n\n    // Let the workers stop when we are done\n    defer c.queue.ShutDown()\n    klog.Info("Starting Pod controller")\n\n    go c.informer.Run(stopCh)\n\n    // Wait for all involved caches to be synced, before processing items from the queue is started\n    if !cache.WaitForCacheSync(stopCh, c.informer.HasSynced) {\n        runtime.HandleError(fmt.Errorf("Timed out waiting for caches to sync"))\n        return\n    }\n\n    for i := 0; i < workers; i++ {\n        go wait.Until(c.runWorker, time.Second, stopCh)\n    }\n\n    <-stopCh\n    klog.Info("Stopping Pod controller")\n}\n\nfunc (c *Controller) runWorker() {\n    for c.processNextItem() {\n    }\n}\n\nfunc main() {\n    var kubeconfig string = "C:\\\\Users\\\\hanwei\\\\config"\n    var master string\n\n    //flag.StringVar(&kubeconfig, "kubeconfig", "", "absolute path to the kubeconfig file")\n    flag.StringVar(&master, "master", "", "master url")\n    flag.Parse()\n\n    // creates the connection\n    config, err := clientcmd.BuildConfigFromFlags(master, kubeconfig)\n    if err != nil {\n        klog.Fatal(err)\n    }\n\n    // creates the clientset\n    clientset, err := kubernetes.NewForConfig(config)\n    if err != nil {\n        klog.Fatal(err)\n    }\n\n    // create the pod watcher\n    podListWatcher := cache.NewListWatchFromClient(clientset.CoreV1().RESTClient(), "pods", v1.NamespaceDefault, fields.Everything())\n\n    // create the workqueue\n    queue := workqueue.NewRateLimitingQueue(workqueue.DefaultControllerRateLimiter())\n\n    // Bind the workqueue to a cache with the help of an informer. This way we make sure that\n    // whenever the cache is updated, the pod key is added to the workqueue.\n    // Note that when we finally process the item from the workqueue, we might see a newer version\n    // of the Pod than the version which was responsible for triggering the update.\n    indexer, informer := cache.NewIndexerInformer(podListWatcher, &v1.Pod{}, 0, cache.ResourceEventHandlerFuncs{\n        AddFunc: func(obj interface{}) {\n            key, err := cache.MetaNamespaceKeyFunc(obj)\n            if err == nil {\n                queue.Add(key)\n            }\n        },\n        UpdateFunc: func(old interface{}, new interface{}) {\n            key, err := cache.MetaNamespaceKeyFunc(new)\n            if err == nil {\n                queue.Add(key)\n            }\n        },\n        DeleteFunc: func(obj interface{}) {\n            // IndexerInformer uses a delta queue, therefore for deletes we have to use this\n            // key function.\n            key, err := cache.DeletionHandlingMetaNamespaceKeyFunc(obj)\n            if err == nil {\n                queue.Add(key)\n            }\n        },\n    }, cache.Indexers{})\n\n    controller := NewController(queue, indexer, informer)\n\n    // We can now warm up the cache for initial synchronization.\n    // Let\'s suppose that we knew about a pod "mypod" on our last run, therefore add it to the cache.\n    // If this pod is not there anymore, the controller will be notified about the removal after the\n    // cache has synchronized.\n    indexer.Add(&v1.Pod{\n        ObjectMeta: meta_v1.ObjectMeta{\n            Name:      "mypod",\n            Namespace: v1.NamespaceDefault,\n        },\n    })\n\n    // Now let\'s start the controller\n    stop := make(chan struct{})\n    defer close(stop)\n    go controller.Run(1, stop)\n\n    // Wait forever\n    select {}\n}\n')),(0,o.kt)("p",null,"\u8fd0\u884cmain\u65b9\u6cd5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"GOROOT=C:\\go\\go1.19 #gosetup\nGOPATH=C:\\Users\\hanwei\\go #gosetup\nC:\\go\\go1.19\\bin\\go.exe build -o C:\\Users\\hanwei\\AppData\\Local\\Temp\\GoLand\\___go_build_k8s_io_client_go_examples_workqueue.exe k8s.io/client-go/examples/workqueue #gosetup\nC:\\Users\\hanwei\\AppData\\Local\\Temp\\GoLand\\___go_build_k8s_io_client_go_examples_workqueue.exe\nI1206 13:33:12.745784   21064 main.go:124] Starting Pod controller\nSync/Add/Update for Pod virt-launcher-bc-2003-0907-001-7cxdn\nSync/Add/Update for Pod virt-launcher-zal-vm-centos-zng7m\nSync/Add/Update for Pod virt-launcher-test-vpc-p2v2v\nSync/Add/Update for Pod virt-launcher-test-sg-vh6gq\nSync/Add/Update for Pod virt-launcher-test-sg-111-g5kc6\nSync/Add/Update for Pod virt-launcher-vm-centos-hc5rc\nSync/Add/Update for Pod virt-launcher-test-vloume-bak-xklt9\nSync/Add/Update for Pod tomcat-deployment-5b689c848f-2jprs\nSync/Add/Update for Pod hp-volume-g8b69\nSync/Add/Update for Pod virt-launcher-test-snapshot-v-lqg7x\nSync/Add/Update for Pod cdi-upload-windows-2003-001\nPod default/mypod does not exist anymore\nSync/Add/Update for Pod virt-launcher-test-vloume-bak-xklt9\nSync/Add/Update for Pod virt-launcher-test-vloume-bak-xklt9\nPod default/virt-launcher-test-vloume-bak-xklt9 does not exist anymore\nSync/Add/Update for Pod virt-launcher-testvm-gd649\nSync/Add/Update for Pod virt-launcher-testvm-gd649\nSync/Add/Update for Pod virt-launcher-testvm-gd649\nSync/Add/Update for Pod virt-launcher-testvm-gd649\nSync/Add/Update for Pod virt-launcher-testvm-gd649\nSync/Add/Update for Pod virt-launcher-testvm-gd649\nSync/Add/Update for Pod virt-launcher-testvm-gd649\nSync/Add/Update for Pod virt-launcher-testvm-gd649\nSync/Add/Update for Pod virt-launcher-testvm-gd649\nSync/Add/Update for Pod virt-launcher-test-vpc-p2v2v\nSync/Add/Update for Pod virt-launcher-test-vpc-p2v2v\nPod default/virt-launcher-test-vpc-p2v2v does not exist anymore\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"[root@k8s-11 ~]# kubectl get po\nNAME                                   READY   STATUS    RESTARTS   AGE\ncdi-upload-windows-2003-001            1/1     Running   1          14d\nhp-volume-g8b69                        1/1     Running   0          16h\ntomcat-deployment-5b689c848f-2jprs     0/1     Error     0          13d\nvirt-launcher-bc-2003-0907-001-7cxdn   1/1     Running   0          19h\nvirt-launcher-test-sg-111-g5kc6        1/1     Running   0          19h\nvirt-launcher-test-sg-vh6gq            1/1     Running   0          19h\nvirt-launcher-test-snapshot-v-lqg7x    1/1     Running   0          19h\nvirt-launcher-test-vpc-p2v2v           1/1     Running   0          4m7s\nvirt-launcher-vm-centos-hc5rc          1/1     Running   0          19h\nvirt-launcher-zal-vm-centos-zng7m      1/1     Running   0          3h7m\n")),(0,o.kt)("p",null,"\u589e\u52a0\u4e86\u4e00\u4e2apod\uff1a virt-launcher-testvm-gd649   "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"[root@k8s-11 ~]# kubectl get po\nNAME                                   READY   STATUS     RESTARTS   AGE\ncdi-upload-windows-2003-001            1/1     Running    1          14d\nhp-volume-g8b69                        1/1     Running    0          16h\ntomcat-deployment-5b689c848f-2jprs     0/1     Error      0          13d\nvirt-launcher-bc-2003-0907-001-7cxdn   1/1     Running    0          19h\nvirt-launcher-test-sg-111-g5kc6        1/1     Running    0          19h\nvirt-launcher-test-sg-vh6gq            1/1     Running    0          19h\nvirt-launcher-test-snapshot-v-lqg7x    1/1     Running    0          19h\nvirt-launcher-test-vpc-p2v2v           1/1     Running    0          4m27s\nvirt-launcher-testvm-gd649             0/2     Init:0/2   0          2s\nvirt-launcher-vm-centos-hc5rc          1/1     Running    0          19h\nvirt-launcher-zal-vm-centos-zng7m      1/1     Running    0          3h7m\n")),(0,o.kt)("p",null,"\u63a7\u5236\u53f0\u66f4\u65b0\u4ee5\u4e0b\u8f93\u51fa\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Sync/Add/Update for Pod virt-launcher-testvm-gd649\nSync/Add/Update for Pod virt-launcher-testvm-gd649\n")),(0,o.kt)("p",null,"main\u65b9\u6cd5\u79cd\u521b\u5efa\u4e86podListwatcher\uff0cpodListWatcher \u5b9e\u9645\u662f\u4e00\u4e2ahttp\u77ed\u8fde\u63a5\u548c\u4e00\u4e2ahttp\u957f\u8fde\u63a5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'    // create the pod watcher\n    podListWatcher := cache.NewListWatchFromClient(clientset.CoreV1().RESTClient(), "pods", v1.NamespaceDefault, fields.Everything())\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"// NewListWatchFromClient creates a new ListWatch from the specified client, resource, namespace and field selector.\nfunc NewListWatchFromClient(c Getter, resource string, namespace string, fieldSelector fields.Selector) *ListWatch {\n    optionsModifier := func(options *metav1.ListOptions) {\n        options.FieldSelector = fieldSelector.String()\n    }\n    return NewFilteredListWatchFromClient(c, resource, namespace, optionsModifier)\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"// NewFilteredListWatchFromClient creates a new ListWatch from the specified client, resource, namespace, and option modifier.\n// Option modifier is a function takes a ListOptions and modifies the consumed ListOptions. Provide customized modifier function\n// to apply modification to ListOptions with a field selector, a label selector, or any other desired options.\nfunc NewFilteredListWatchFromClient(c Getter, resource string, namespace string, optionsModifier func(options *metav1.ListOptions)) *ListWatch {\n    listFunc := func(options metav1.ListOptions) (runtime.Object, error) {\n        optionsModifier(&options)\n        return c.Get().\n            Namespace(namespace).\n            Resource(resource).\n            VersionedParams(&options, metav1.ParameterCodec).\n            Do(context.TODO()).\n            Get()\n    }\n    watchFunc := func(options metav1.ListOptions) (watch.Interface, error) {\n        options.Watch = true\n        optionsModifier(&options)\n        return c.Get().\n            Namespace(namespace).\n            Resource(resource).\n            VersionedParams(&options, metav1.ParameterCodec).\n            Watch(context.TODO())\n    }\n    return &ListWatch{ListFunc: listFunc, WatchFunc: watchFunc}\n}\n")))}p.isMDXComponent=!0}}]);